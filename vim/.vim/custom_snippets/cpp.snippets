priority -50

extends c

# We want to overwrite everything in parent ft.
priority -49

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`} {
public:
	${1/(\w+).*/$1/}(${2:arguments});
	~${1/(\w+).*/$1/}();

private:
	${0:/* data */}
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`} {
	${VISUAL}${0}
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r")) {
	char buf[1024];
	while (size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vector "std::vector (v)"
std::vector<${1:char}> v$0;
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet todo "TODO(date, username)"
/* TODO(`date`, `whoami`)
 * $0
 */
endsnippet

snippet debug "Print a debug line to stderr" b
cerr << "[DEBUG] $1" << $0 << endl;
endsnippet

snippet cout "cout (w/o std::)"
cout << $1;
endsnippet

snippet cin "cin (w/o std::)"
cin >> $1;
endsnippet

snippet e "endl (w/o std::)"
<< endl
endsnippet

snippet infocomment "An information comment containing author/ID/class/assignment" b
/*
 * Author: Erik H
 * Student ID: $1
 * Class: CMPT$2
 * ${3:Lab} $4
 */
$0
endsnippet

snippet using "using namespace {std}"
using namespace ${1:std};$0
endsnippet

# Currently _mostly_ works. The only time it won't find a function is if it is an
# operator overload I haven't added yet.
snippet funcomments "Searches for all functions in the file and sets up comments." b
`!p
import os
os.environ["CURRENT_FILE"] = snip.fn
os.environ["CURRENT_FILE_BASENAME"] = snip.basename
`
`
printf "/*"
egrep "(bool|int|void|char|short|unsigned|long|float|double|${CURRENT_FILE_BASENAME})(\*|\&)?[[:space:]]*(operator)?[[:space:]]*[[:alnum:]|_|+|=|\(\)]*[[:space:]]*\(.*\)" ${CURRENT_FILE} | while read -r line ; do
	printf "\t$line\n"
	printf "\t  TODO: Description\n"
	echo
done
printf "*/"
`
endsnippet

# vim:ft=snippets:
