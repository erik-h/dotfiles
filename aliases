alias gst="git status"
alias gdt="git dt"
alias ga="git add"
alias gb="git branch"
alias gco="git checkout"
alias gc="git commit"
alias gp="git push"
alias gl="git pull"
alias glog="git log"
alias glogp='git log --pretty=format:"%h %s" --graph'

alias ls="ls -F --color=auto"
alias la="ls -A"
alias ll="ls -l"
alias l="ls -C"
alias sl="sl -e"

alias rmi="rm -i"
alias cpi="cp -i"
alias mvi="mv -i"

alias c="tail -n +1"

alias vvim="vim -n -u NONE" # 'Vanilla' vim - useful for editing VERY large files

alias open="xdg-open"

mkdir -p ~/Pictures/Screenshots
alias mscrot="scrot ~/Pictures/Screenshots/%b%d::%H%M%S.png"

alias cb="xclip -selection clipboard"

alias tmux="tmux -2" # Force tmux to 256 colors

alias sprunge="curl -F 'sprunge=<-' http://sprunge.us"

#alias lock="xscreensaver-command -l"

alias nemo="nemo --no-desktop" # Stop the Desktop window from opening in i3
alias nautilus="nautilus --no-desktop" # See: above

alias mupdf="mupdf-x11"

# Beautify piped in XML and print it to stdout
alias xb="python -c 'import sys;import xml.dom.minidom;s=sys.stdin.read();print xml.dom.minidom.parseString(s).toprettyxml()'"

function sprungef() {
	file="$1"
	curloutput=$(cat "$1" | curl -sF "sprunge=<-" http://sprunge.us)
	result=$curloutput"?"${file##*.} # Append the file extension to the url to get syntax highlighting.
	echo $result
}

# ranger - change to last viewed directory on exit                                 
function ranger-cd {                                                               
    tempfile="$(mktemp)"                                                           
    /usr/local/bin/ranger --choosedir="$tempfile" "${@:-$(pwd)}"                         
    test -f "$tempfile" &&                                                         
    if [ "$(cat -- "$tempfile")" != "$(echo -n `pwd`)" ]; then                     
        cd -- "$(cat "$tempfile")"                                                 
    fi                                                                             
    rm -f -- "$tempfile"                                                           
}                                                                                  
                                                                                   
# This binds Ctrl-O to ranger-cd:                                                  
bind '"\C-o":"ranger-cd\C-m"'

#function lock() {
#	xscreensaver-command -l > /dev/null 2>&1
#	if [ $? -eq 255 ]; then
#		xscreensaver &
#		xscreensaver-command -l
#	fi
#}

function parse_git_branch {
	ref=$(git rev-parse --abbrev-ref HEAD 2> /dev/null) || return
	echo "($ref) "
}

## Space checking
# Check how much space dotfiles are taking up
function dotspace() {
	for f in .*; do
		if ! [[ "$f" =~ \.\.?$ ]]; then
			du -hs "$f" | sort -h
		fi
	done
}

# Check how much space non-hidden files are taking up
function space() {
	for f in *; do
		du -hs "$f" | sort -h
	done
}

# If fzf is installed, use these fzf helper functions
if [ -f ~/.fzf.bash ]; then
	# fe [FUZZY PATTERN] - Open the selected file with the default editor
	#   - Bypass fuzzy finder if there's only one match (--select-1)
	#   - Exit if there's no match (--exit-0)
	function fe() {
	  local file
	  file=$(fzf --query="$1" --select-1 --exit-0)
	  [ -n "$file" ] && ${EDITOR:-vim} "$file"
	}

	# Modified version where you can press
	#   - CTRL-O to open with `open` command,
	#   - CTRL-E or Enter key to open with the $EDITOR
	function fo() {
	  local out file key
	  out=$(fzf-tmux --query="$1" --exit-0 --expect=ctrl-o,ctrl-e)
	  key=$(head -1 <<< "$out")
	  file=$(head -2 <<< "$out" | tail -1)
	  if [ -n "$file" ]; then
		[ "$key" = ctrl-e ] && ${EDITOR:-vim} "$file" || open "$file"
	  fi
	}

	function f() { # fzf / includes hidden directories
		find . -name .git -prune -o $1 -print 2> /dev/null | sed 's@^..\(.*\)$@\1@' | fzf -x
	}

	function fd() {
		local dir
		dir=$(find ${1:-*} -path '*/\.*' -prune \
		-o -type d -print 2> /dev/null | fzf +m) &&
		cd "$dir"
}

fi
